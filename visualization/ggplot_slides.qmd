---
title: "GGplot"
format:
  revealjs:
    smaller: true
    scrollable: true
    theme: solarized
editor: visual
---

```{r, include = FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = FALSE)
library(tidyverse)
```

# DATA VISUALISATION

## Intro

## Datasets

::: panel-tabset
## `mpg`

```{r, echo = FALSE}
mpg %>% DT::datatable()
```

## `diamonds`

```{r, echo = FALSE}
diamonds %>% DT::datatable()
```
:::

## First Steps

::: columns
::: {.column width="60%"}
```{r}
library(ggplot2)

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

**GRAPHING TEMPLATE**

``` r
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```
:::

::: {.column width="40%"}
-   `ggplot()` creates a **coordinate system** that you can add layers to.

    -   First argument of `ggplot()`: the dataset to use in the graph.

-   You complete your graph by adding one or more **layers** to `ggplot()`.

    -   `geom_point()` adds a layer of points.

-   Each **geom** function takes a **mapping** argument.

    -   How variables in your dataset are mapped to visual properties.

    -   `aes()`: which variables to map to the x and y axes.

    -   ggplot2 looks for the mapped variables in the data argument.
:::
:::

## Aesthetic Mappings

::: panel-tabset
### Color

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```
:::

::: {.column width="40%"}
-   **Aesthetic**: a visual property of the objects in your plot.

    -   Size, shape, color ...

-   To map an aesthetic to a variable, associate the name of the aesthetic to the name of the variable inside `aes()`.

-   ggplot2 will automatically assign a unique level of the aesthetic to each unique value of the variable, a process known as **scaling**.

-   ggplot2 will also add a **legend** that explains which levels correspond to which values.
:::
:::

### Size

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
```
:::

::: {.column width="40%"}
-   For each aesthetic, you use `aes()` to associate the name of the aesthetic with a variable to display.

-   The `aes()` function gathers together each of the aesthetic mappings used by a layer and passes them to the layer's mapping argument.

```{r, eval=FALSE}
aes(x = displ, y = hwy, alpha = class)
```
:::
:::

### Shape

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```
:::

::: {.column width="40%"}
-   What happened to the SUVs?

-   ggplot2 will only use six shapes at a time.

-   By default, additional groups will go unplotted when you use the shape aesthetic.
:::
:::

### Manually

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
```
:::

::: {.column width="40%"}
-   Here, the color doesn't convey information about a variable, but only changes the appearance of the plot.

-   To set an aesthetic manually, set the aesthetic by name as an argument of your geom function; i.e. it goes **outside** of `aes().`

-   You'll need to pick a level that makes sense for that aesthetic:

    -   The name of a color as a character string.

    -   The size of a point in mm

    -   The shape of a point as a number
:::
:::
:::

::: notes
Once you map an aesthetic, ggplot2 takes care of the rest. It selects a reasonable scale to use with the aesthetic, and it constructs a legend that explains the mapping between levels and values. For x and y aesthetics, ggplot2 does not create a legend, but it creates an axis line with tick marks and a label. The axis line acts as a legend; it explains the mapping between locations and values.
:::

## Facets

::: panel-tabset
## 1 variable - `facet_wrap()`

::: columns
::: {.column width="40%"}
-   One way to add additional variables is with aesthetics.

-   Another way, particularly useful for categorical variables, is to split your plot into **facets**, subplots that each display one subset of the data.

-   To facet your plot by a **single variable**, use `facet_wrap()`. The first argument of `facet_wrap()` should be a formula, which you create with [`~`](https://rdrr.io/r/base/tilde.html) followed by a variable name.

    -   The variable that you pass to `facet_wrap()` should be discrete.
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
```
:::
:::

## 2 variables - `facet_grid()`

::: columns
::: {.column width="40%"}
-   To facet your plot on the combination of **two** **variables**, add `facet_grid()` to your plot call.

-   The first argument of `facet_grid()` is also a formula.

    -   This time the formula should contain two variable names separated by a [`~`](https://rdrr.io/r/base/tilde.html).
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```
:::
:::

## No row or columns - `facet_grid()`

::: columns
::: {.column width="40%"}
-   If you prefer to **not facet in the rows or columns** dimension, use a `.` instead of a variable name, e.g.Â `+ facet_grid(. ~ cyl)`.
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(. ~ class)
```
:::
:::
:::

## Geometric Objects

::: columns
::: {.column width="50%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```
:::

::: {.column width="50%"}
```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```
:::
:::

-   Both plots contain the same x variable, the same y variable, and both describe the same data.

-   But the plots are not identical. Each plot uses a different visual object to represent the data.

-   In ggplot2 syntax, we say that they use different **geoms**.

## Geometric Objects and Mapping

::: columns
::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```
:::

::: {.column width="40%"}
-   Every geom function in ggplot2 takes a `mapping` argument.

-   However, not every aesthetic works with every geom.

    -   You could set the shape of a point, but you couldn't set the "shape" of a line.

    -   On the other hand, you *could* set the linetype of a line. `geom_smooth()` will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype.
:::
:::

## Geometric Objects - Layers

::: columns
::: {.column width="40%"}
-   We can make it more clear by overlaying the lines on top of the raw data and then coloring everything according to `drv`.

-   Notice that this plot contains **two geoms in the same graph**!
:::

::: {.column width="60%"}
``` {.r code-line-numbers="|2|3"}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
```

```{r, echo = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
```
:::
:::

-   ggplot2 provides over 40 geoms, and extension packages provide even more (see [ggplot2 extensions - gallery](https://exts.ggplot2.tidyverse.org/gallery/) for a sampling).

-   The best way to get a comprehensive overview is the **ggplot2 cheatsheet**, which you can find at [RStudio Cheatsheets](http://rstudio.com/resources/cheatsheets)

    To learn more about any single geom, use help: ?geom_smooth.

## Geometric Objects - Grouping

::: columns
::: {.column width="60%"}
::: panel-tabset
## No grouping

```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

## `group`

```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
```

## `color`

```{r}
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE
  )
```
:::
:::

::: {.column width="40%"}
-   Many geoms, like `geom_smooth()`, use a single geometric object to display multiple rows of data.

-   For these geoms, you can set the `group` aesthetic to a categorical variable to draw multiple objects.

-   ggplot2 will draw a separate object for each unique value of the grouping variable.

-   In practice, ggplot2 will automatically group the data for these geoms whenever you map an aesthetic to a discrete variable (as in the `linetype` example).

-   It is convenient to rely on this feature because the group aesthetic by itself does not add a legend or distinguishing features to the geoms.
:::
:::

## Geometric Objects - Multiple geoms

::: panel-tabset
## Multiple geoms

::: columns
::: {.column width="40%"}
-   To display multiple geoms in the same plot, add multiple geom functions to `ggplot()`

-   This, however, introduces some duplication in our code.

    -   Imagine if you wanted to change the y-axis to display `cty` instead of `hwy`. You'd need to change the variable in two places, and you might forget to update one.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```
:::
:::

## `ggplot()`

::: columns
::: {.column width="40%"}
-   You can avoid this type of repetition by passing a set of mappings to `ggplot()`.

-   ggplot2 will treat these mappings as global mappings that apply to each geom in the graph.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```
:::
:::

## `geom_`

::: columns
::: {.column width="40%"}
-   If you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer.

-   It will use these mappings to extend or overwrite the global mappings *for that layer only*.

-   This makes it possible to display different aesthetics in different layers.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
```
:::
:::

## Data

::: columns
::: {.column width="40%"}
-   You can use the same idea to specify different `data` for each layer.

-   Here, our smooth line displays just a subset of the `mpg` dataset, the subcompact cars.

-   The local data argument in `geom_smooth()` overrides the global data argument in `ggplot()` for that layer only.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
```
:::
:::
:::

## Statistical Transformations (I)

::: panel-tabset
## geom_bar

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))
```
:::

::: {.column width="40%"}
On the x-axis, the chart displays `cut`, a variable from `diamonds`. On the y-axis, it displays count, but count is not a variable in `diamonds`! Where does count come from? Many graphs, like scatterplots, plot the raw values of your dataset. Other graphs, like bar charts, calculate new values to plot:

-   bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.

-   smoothers fit a model to your data and then plot predictions from the model.

-   boxplots compute a robust summary of the distribution and then display a specially formatted box.

The algorithm used to calculate new values for a graph is called a **stat**, short for statistical transformation.
:::
:::

## stat_count

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  stat_count(mapping = aes(x = cut))
```
:::

::: {.column width="40%"}
You can learn which stat a geom uses by inspecting the default value for the `stat` argument. For example, `?geom_bar` shows that the default value for `stat` is "count", which means that `geom_bar()` uses `stat_count()`. `stat_count()` is documented on the same page as `geom_bar()`, and if you scroll down you can find a section called "Computed variables". That describes how it computes two new variables: `count` and `prop`.

You can generally use geoms and stats interchangeably. For example, you can recreate the previous plot using `stat_count()` instead of `geom_bar()`
:::
:::
:::

## Statistical Transformations (II)

There are three reasons you might need to use a stat explicitly:

::: panel-tabset
## Reason 1

::: columns
::: {.column width="40%"}
-   You might want to override the default stat.

-   Here, I change the stat of `geom_bar()` from count (the default) to identity \^\[This is the default for `geom_col()]`.

-   This lets me map the height of the bars to the raw values of a yy variable.

-   Unfortunately when people talk about bar charts casually, they might be referring to this type of bar chart, where the height of the bar is already present in the data, or the previous bar chart where the height of the bar is generated by counting rows.
:::

::: {.column width="60%"}
```{r}
demo <- tribble(
  ~cut,         ~freq,
  "Fair",       1610,
  "Good",       4906,
  "Very Good",  12082,
  "Premium",    13791,
  "Ideal",      21551
)

ggplot(data = demo) +
  geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
```
:::
:::

## Reason 2

::: columns
::: {.column width="40%"}
You might want to override the default mapping from transformed variables to aesthetics. For example, you might want to display a bar chart of proportion, rather than count. To find the variables computed by the stat, look for the help section titled "computed variables".
:::

::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
```
:::
:::

## Reason 3

::: columns
::: {.column width="40%"}
You might want to draw greater attention to the statistical transformation in your code. For example, you might use `stat_summary()`, which summarises the y values for each unique x value, to draw attention to the summary that you're computing
:::

::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
```
:::
:::
:::

## Position Adjustments

## Coordinate Systems

## The layered grammar of graphics

# GRAPHICS FOR COMMUNICATION

## Label

## Annotations

## Scales

## Zooming

## Themes

## Saving your Plots

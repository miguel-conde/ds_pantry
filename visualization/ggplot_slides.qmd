---
title: "GGplot"
toc: true
toc-depth: 1
number-sections: true
number-depth: 1 
slide-number: c/t
format:
  revealjs:
    smaller: true
    scrollable: true
    theme: solarized
editor: visual
---

```{r, include = FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = FALSE,
                      fig.align = "center")
library(tidyverse)
```

# INTRODUCTION

## Visualisation and Communication in Data Science Projects

![](imgs/data-science.png){fig-align="center"}

-   **Visualisation** is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you're asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don't scale particularly well because they require a human to interpret them.

-   The last step of data science is **communication**, an absolutely critical part of any data analysis project. It doesn't matter how well your models and visualisation have led you to understand the data unless you can also communicate your results to others.

## Datasets

::: panel-tabset
## `mpg`

```{r, echo = FALSE}
mpg %>% DT::datatable()
```

## `diamonds`

```{r, echo = FALSE}
diamonds %>% DT::datatable()
```
:::

# DATA VISUALISATION

## First Steps

::: columns
::: {.column width="60%"}
```{r}
library(ggplot2)

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

**GRAPHING TEMPLATE**

``` r
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```
:::

::: {.column width="40%"}
-   `ggplot()` creates a **coordinate system** that you can add layers to.

    -   First argument of `ggplot()`: the dataset to use in the graph.

-   You complete your graph by adding one or more **layers** to `ggplot()`.

    -   `geom_point()` adds a layer of points.

-   Each **geom** function takes a **mapping** argument.

    -   How variables in your dataset are mapped to visual properties.

    -   `aes()`: which variables to map to the x and y axes.

    -   ggplot2 looks for the mapped variables in the data argument.
:::
:::

## Aesthetic Mappings

::: panel-tabset
### Color

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```
:::

::: {.column width="40%"}
-   **Aesthetic**: a visual property of the objects in your plot.

    -   Size, shape, color ...

-   To map an aesthetic to a variable, associate the name of the aesthetic to the name of the variable inside `aes()`.

-   ggplot2 will automatically assign a unique level of the aesthetic to each unique value of the variable, a process known as **scaling**.

-   ggplot2 will also add a **legend** that explains which levels correspond to which values.
:::
:::

### Size

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
```
:::

::: {.column width="40%"}
-   For each aesthetic, you use `aes()` to associate the name of the aesthetic with a variable to display.

-   The `aes()` function gathers together each of the aesthetic mappings used by a layer and passes them to the layer's mapping argument.

```{r, eval=FALSE}
aes(x = displ, y = hwy, alpha = class)
```
:::
:::

### Shape

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```
:::

::: {.column width="40%"}
-   What happened to the SUVs?

-   ggplot2 will only use six shapes at a time.

-   By default, additional groups will go unplotted when you use the shape aesthetic.
:::
:::

### Manually

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
```
:::

::: {.column width="40%"}
-   Here, the color doesn't convey information about a variable, but only changes the appearance of the plot.

-   To set an aesthetic manually, set the aesthetic by name as an argument of your geom function; i.e. it goes **outside** of `aes().`

-   You'll need to pick a level that makes sense for that aesthetic:

    -   The name of a color as a character string.

    -   The size of a point in mm

    -   The shape of a point as a number
:::
:::
:::

::: notes
Once you map an aesthetic, ggplot2 takes care of the rest. It selects a reasonable scale to use with the aesthetic, and it constructs a legend that explains the mapping between levels and values. For x and y aesthetics, ggplot2 does not create a legend, but it creates an axis line with tick marks and a label. The axis line acts as a legend; it explains the mapping between locations and values.
:::

## Facets

::: panel-tabset
## 1 variable - `facet_wrap()`

::: columns
::: {.column width="40%"}
-   One way to add additional variables is with aesthetics.

-   Another way, particularly useful for categorical variables, is to split your plot into **facets**, subplots that each display one subset of the data.

-   To facet your plot by a **single variable**, use `facet_wrap()`. The first argument of `facet_wrap()` should be a formula, which you create with [`~`](https://rdrr.io/r/base/tilde.html) followed by a variable name.

    -   The variable that you pass to `facet_wrap()` should be discrete.
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
```
:::
:::

## 2 variables - `facet_grid()`

::: columns
::: {.column width="40%"}
-   To facet your plot on the combination of **two** **variables**, add `facet_grid()` to your plot call.

-   The first argument of `facet_grid()` is also a formula.

    -   This time the formula should contain two variable names separated by a [`~`](https://rdrr.io/r/base/tilde.html).
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```
:::
:::

## No row or columns - `facet_grid()`

::: columns
::: {.column width="40%"}
-   If you prefer to **not facet in the rows or columns** dimension, use a `.` instead of a variable name, e.g.Â `+ facet_grid(. ~ cyl)`.
:::

::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(. ~ class)
```
:::
:::
:::

## Geometric Objects

::: columns
::: {.column width="50%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```
:::

::: {.column width="50%"}
```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```
:::
:::

-   Both plots contain the same x variable, the same y variable, and both describe the same data.

-   But the plots are not identical. Each plot uses a different visual object to represent the data.

-   In ggplot2 syntax, we say that they use different **geoms**.

## Geometric Objects and Mapping

::: columns
::: {.column width="60%"}
```{r}
#| output-location: column
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```
:::

::: {.column width="40%"}
-   Every geom function in ggplot2 takes a `mapping` argument.

-   However, not every aesthetic works with every geom.

    -   You could set the shape of a point, but you couldn't set the "shape" of a line.

    -   On the other hand, you *could* set the linetype of a line. `geom_smooth()` will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype.
:::
:::

## Geometric Objects - Layers

::: columns
::: {.column width="40%"}
-   We can make it more clear by overlaying the lines on top of the raw data and then coloring everything according to `drv`.

-   Notice that this plot contains **two geoms in the same graph**!
:::

::: {.column width="60%"}
``` {.r code-line-numbers="|2|3"}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
```

```{r, echo = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
```
:::
:::

-   ggplot2 provides over 40 geoms, and extension packages provide even more (see [ggplot2 extensions - gallery](https://exts.ggplot2.tidyverse.org/gallery/) for a sampling).

-   The best way to get a comprehensive overview is the **ggplot2 cheatsheet**, which you can find at [RStudio Cheatsheets](http://rstudio.com/resources/cheatsheets)

    To learn more about any single geom, use help: ?geom_smooth.

## Geometric Objects - Grouping

::: columns
::: {.column width="60%"}
::: panel-tabset
## No grouping

```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

## `group`

```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
```

## `color`

```{r}
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE
  )
```
:::
:::

::: {.column width="40%"}
-   Many geoms, like `geom_smooth()`, use a single geometric object to display multiple rows of data.

-   For these geoms, you can set the `group` aesthetic to a categorical variable to draw multiple objects.

-   ggplot2 will draw a separate object for each unique value of the grouping variable.

-   In practice, ggplot2 will automatically group the data for these geoms whenever you map an aesthetic to a discrete variable (as in the `linetype` example).

-   It is convenient to rely on this feature because the group aesthetic by itself does not add a legend or distinguishing features to the geoms.
:::
:::

## Geometric Objects - Multiple geoms

::: panel-tabset
## Multiple geoms

::: columns
::: {.column width="40%"}
-   To display multiple geoms in the same plot, add multiple geom functions to `ggplot()`

-   This, however, introduces some duplication in our code.

    -   Imagine if you wanted to change the y-axis to display `cty` instead of `hwy`. You'd need to change the variable in two places, and you might forget to update one.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```
:::
:::

## `ggplot()`

::: columns
::: {.column width="40%"}
-   You can avoid this type of repetition by passing a set of mappings to `ggplot()`.

-   ggplot2 will treat these mappings as global mappings that apply to each geom in the graph.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```
:::
:::

## `geom_`

::: columns
::: {.column width="40%"}
-   If you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer.

-   It will use these mappings to extend or overwrite the global mappings *for that layer only*.

-   This makes it possible to display different aesthetics in different layers.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
```
:::
:::

## Data

::: columns
::: {.column width="40%"}
-   You can use the same idea to specify different `data` for each layer.

-   Here, our smooth line displays just a subset of the `mpg` dataset, the subcompact cars.

-   The local data argument in `geom_smooth()` overrides the global data argument in `ggplot()` for that layer only.
:::

::: {.column width="60%"}
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
```
:::
:::
:::

## Statistical Transformations (I)

::: panel-tabset
## geom_bar

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))
```
:::

::: {.column width="40%"}
On the x-axis, the chart displays `cut`, a variable from `diamonds`. On the y-axis, it displays count, but count is not a variable in `diamonds`! Where does count come from? Many graphs, like scatterplots, plot the raw values of your dataset. Other graphs, like bar charts, calculate new values to plot:

-   bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.

-   smoothers fit a model to your data and then plot predictions from the model.

-   boxplots compute a robust summary of the distribution and then display a specially formatted box.

The algorithm used to calculate new values for a graph is called a **stat**, short for statistical transformation.
:::
:::

## stat_count

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  stat_count(mapping = aes(x = cut))
```
:::

::: {.column width="40%"}
You can learn which stat a geom uses by inspecting the default value for the `stat` argument. For example, `?geom_bar` shows that the default value for `stat` is "count", which means that `geom_bar()` uses `stat_count()`. `stat_count()` is documented on the same page as `geom_bar()`, and if you scroll down you can find a section called "Computed variables". That describes how it computes two new variables: `count` and `prop`.

You can generally use geoms and stats interchangeably. For example, you can recreate the previous plot using `stat_count()` instead of `geom_bar()`
:::
:::
:::

## Statistical Transformations (II)

There are three reasons you might need to use a stat explicitly:

::: panel-tabset
## Reason 1

::: columns
::: {.column width="40%"}
-   You might want to override the default stat.

-   Here, I change the stat of `geom_bar()` from count (the default) to identity[^1].

-   This lets me map the height of the bars to the raw values of a yy variable.

-   Unfortunately when people talk about bar charts casually, they might be referring to this type of bar chart, where the height of the bar is already present in the data, or the previous bar chart where the height of the bar is generated by counting rows.
:::

::: {.column width="60%"}
```{r}
demo <- diamonds %>% group_by(cut) %>% summarise(freq = n())

ggplot(data = demo) +
  geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
```
:::
:::

## Reason 2

::: columns
::: {.column width="40%"}
-   You might want to override the default mapping from transformed variables to aesthetics.

-   For example, you might want to display a bar chart of proportion, rather than count.

-   To find the variables computed by the stat, look for the help section titled "computed variables".
:::

::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
```
:::
:::

## Reason 3

::: columns
::: {.column width="40%"}
-   You might want to draw greater attention to the statistical transformation in your code.

-   For example, you might use `stat_summary()`, which summarises the y values for each unique x value, to draw attention to the summary that you're computing
:::

::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
```
:::
:::
:::

[^1]: This is the default for `geom_col()`

## Position Adjustments (I)

::: columns
::: {.column width="50%"}
You can colour a bar chart using either the `colour` aesthetic, or, more usefully, `fill`:

```{r}
library(patchwork)

p1 <- ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, colour = cut))
p2 <- ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))

p1 + p2
```
:::

::: {.column width="50%"}
Note what happens if you map the fill aesthetic to another variable, like `clarity`: the bars are automatically stacked. Each colored rectangle represents a combination of `cut` and `clarity`.

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))
```
:::
:::

## Position Adjustments (II)

The stacking is performed automatically by the position adjustment specified by the position argument. If you don't want a stacked bar chart, you can use one of three other options: "identity", "dodge" or "fill".

::: panel-tabset
## identity

::: columns
::: {.column width="60%"}
```{r}
p1 <- ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + 
  geom_bar(alpha = 1/5, position = "identity")
p2 <- ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) + 
  geom_bar(fill = NA, position = "identity")

p1 + p2
```
:::

::: {.column width="40%"}
-   `position = "identity"` will place each object exactly where it falls in the context of the graph.

-   This is not very useful for bars, because it overlaps them.

-   To see that overlapping we either need to make the bars slightly transparent by setting `alpha` to a small value, or completely transparent by setting `fill = NA`.
:::
:::

## fill

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
```
:::

::: {.column width="40%"}
-   `position = "fill"` works like stacking, but makes each set of stacked bars the same height.

-   This makes it easier to compare proportions across groups.
:::
:::

## dodge

::: columns
::: {.column width="60%"}
```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
```
:::

::: {.column width="40%"}
-   `position = "dodge"` places overlapping objects directly *beside* one another.

-   This makes it easier to compare individual values.
:::
:::
:::

## Position Adjustments (III)

::: columns
::: {.column width="50%"}
There's one other type of adjustment that's not useful for bar charts, but it can be very useful for scatterplots. Recall our first scatterplot. Did you notice that the plot displays only 126 points, even though there are 234 observations in the dataset?

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```
:::

::: {.column width="50%"}
The values of `hwy` and `displ` are rounded so the points appear on a grid and many points overlap each other. This problem is known as **overplotting**. This arrangement makes it hard to see where the mass of the data is.

You can avoid this gridding by setting the position adjustment to "jitter". `position = "jitter"` adds a small amount of random noise to each point.

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
```
:::
:::

## Coordinate Systems

::: panel-tabset
## `coord_flip()`

::: columns
::: {.column width="40%"}
-   `coord_flip()` switches the x and y axes.

-   This is useful (for example), if you want horizontal boxplots.

-   It's also useful for long labels: it's hard to get them to fit without overlapping on the x-axis.
:::

::: {.column width="60%"}
```{r}
p1 <- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
p2 <- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot() +
  coord_flip()

p1 + p2
```
:::
:::

## `coord_quickmap()`

::: columns
::: {.column width="40%"}
-   `coord_quickmap()` sets the aspect ratio correctly for maps.

-   This is very important if you're plotting spatial data with ggplot2.
:::

::: {.column width="60%"}
```{r}
nz <- map_data("nz")

p1 <- ggplot(nz, aes(long, lat, group = group)) +
  geom_polygon(fill = "white", colour = "black")

p2 <- ggplot(nz, aes(long, lat, group = group)) +
  geom_polygon(fill = "white", colour = "black") +
  coord_quickmap()

p1 + p2
```
:::
:::

## `coord_polar()`

::: columns
::: {.column width="40%"}
-   `coord_polar()` uses polar coordinates. Polar coordinates reveal an interesting connection between a bar chart and a Coxcomb chart.
:::

::: {.column width="60%"}
```{r}
bar <- ggplot(data = diamonds) + 
  geom_bar(
    mapping = aes(x = cut, fill = cut), 
    show.legend = FALSE,
    width = 1
  ) + 
  theme(aspect.ratio = 1) +
  labs(x = NULL, y = NULL)

p1 <- bar + coord_flip()
p2 <- bar + coord_polar()

p1 + p2
```
:::
:::
:::

## The layered grammar of graphics {smaller="false"}

In the previous sections, you learned much more than how to make scatterplots, bar charts, and boxplots. You learned a foundation that you can use to make *any* type of plot with ggplot2. To see this, let's add position adjustments, stats, coordinate systems, and faceting to our code template

    ggplot(data = <DATA>) +
       <GEOM_FUNCTION>(
          mapping = aes(<MAPPINGS>),
          stat = <STAT>,
          position = <POSITION>
       ) +
       <COORDINATE_FUNCTION> +
       <FACET_FUNCTION>

# GRAPHICS FOR COMMUNICATION

## Label

::: panel-tabset
## `labs()`

::: columns
::: {.column width="60%"}
```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  labs(title = "Fuel efficiency generally decreases with engine size")
```
:::

::: {.column width="40%"}
-   The easiest place to start when turning an exploratory graphic into an expository graphic is with good labels.

-   You add labels with the [`labs()`](https://ggplot2.tidyverse.org/reference/labs.html) function. This example adds a plot title.

-   The purpose of a plot title is to summarise the main finding. Avoid titles that just describe what the plot is, e.g.Â "A scatterplot of engine displacement vs.Â fuel economy".
:::
:::

## + `labs()`

::: columns
::: {.column width="60%"}
```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  labs(
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Two seaters (sports cars) are an exception because of their light weight",
    caption = "Data from fueleconomy.gov",
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    colour = "Car type"
  )
```
:::

::: {.column width="40%"}
-   If you need to add more text, there are two other useful labels that you can use):

    -   `subtitle` adds additional detail in a smaller font beneath the title.

    -   `caption` adds text at the bottom right of the plot, often used to describe the source of the data.

-   You can also use [`labs()`](https://ggplot2.tidyverse.org/reference/labs.html) to replace the axis and legend titles.

    -   t's usually a good idea to replace short variable names with more detailed descriptions, and to include the units.
:::
:::

## Eqs

::: columns
::: {.column width="60%"}
```{r}
df <- tibble(
  x = runif(10),
  y = runif(10)
)

ggplot(df, aes(x, y)) +
  geom_point() +
  labs(
    x = quote(sum(x[i] ^ 2, i == 1, n)),
    y = quote(alpha + beta + frac(delta, theta))
  )
```
:::

::: {.column width="40%"}
-   It's possible to use mathematical equations instead of text strings. Just switch `""` out for [`quote()`](https://rdrr.io/r/base/substitute.html) and read about the available options in [`?plotmath`](https://rdrr.io/r/grDevices/plotmath.html)
:::
:::
:::

## Annotations (I)

::: panel-tabset
## `geom_text()`

::: columns
::: {.column width="40%"}
-   In addition to labelling major components of your plot, it's often useful to label individual observations or groups of observations.

-   The first tool you have at your disposal is [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html).

-   [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html) is similar to [`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html), but it has an additional aesthetic: `label`. This makes it possible to add textual labels to your plots.
:::

::: {.column width="60%"}
```{r}
best_in_class <- mpg %>%
  group_by(class) %>%
  filter(row_number(desc(hwy)) == 1)

ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class)) +
  geom_text(aes(label = model), data = best_in_class)
```
:::
:::

## `geom_label()`

::: columns
::: {.column width="40%"}
-   This is hard to read because the labels overlap with each other, and with the points.

-   We can make things a little better by switching to [`geom_label()`](https://ggplot2.tidyverse.org/reference/geom_text.html) which draws a rectangle behind the text.

-   We also use the `nudge_y` parameter to move the labels slightly above the corresponding points:
:::

::: {.column width="60%"}
```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class)) +
  geom_label(aes(label = model), data = best_in_class, nudge_y = 2, alpha = 0.5)
```
:::
:::

## `geom_label_repel()`

::: columns
::: {.column width="40%"}
-   That helps a bit, but if you look closely in the top-left hand corner, you'll notice that there are two labels practically on top of each other.

-   This happens because the highway mileage and displacement for the best cars in the compact and subcompact categories are exactly the same.

-   There's no way that we can fix these by applying the same transformation for every label.

-   Instead, we can use the **ggrepel** package by Kamil Slowikowski. This useful package will automatically adjust labels so that they don't overlap.

-   Note another handy technique used here: I added a second layer of large, hollow points to highlight the points that I've labelled
:::

::: {.column width="60%"}
```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class)) +
  geom_point(size = 3, shape = 1, data = best_in_class) +
  ggrepel::geom_label_repel(aes(label = model), data = best_in_class)
```
:::
:::

## Replace the legend

::: columns
::: {.column width="40%"}
-   You can sometimes use the same idea to replace the legend with labels placed directly on the plot. It's not wonderful for this plot, but it isn't too bad.

-   (`theme(legend.position = "none"`) turns the legend off
:::

::: {.column width="60%"}
```{r}
class_avg <- mpg %>%
  group_by(class) %>%
  summarise(
    displ = median(displ),
    hwy = median(hwy)
  )

ggplot(mpg, aes(displ, hwy, colour = class)) +
  ggrepel::geom_label_repel(aes(label = class),
    data = class_avg,
    size = 6,
    label.size = 0,
    segment.color = NA
  ) +
  geom_point() +
  theme(legend.position = "none")
```
:::
:::

## Single label

::: columns
::: {.column width="40%"}
-   Alternatively, you might just want to add a single label to the plot, but you'll still need to create a data frame.

-   Often, you want the label in the corner of the plot, so it's convenient to create a new data frame using `summarise()` to compute the maximum values of x and y.
:::

::: {.column width="60%"}
```{r}
label <- mpg %>%
  summarise(
    displ = max(displ),
    hwy = max(hwy),
    label = "Increasing engine size is \nrelated to decreasing fuel economy."
  )

ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  geom_text(aes(label = label), data = label, vjust = "top", hjust = "right")
```
:::
:::
:::

## Annotations (II)

In addition to [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html), you have many other geoms in ggplot2 available to help annotate your plot. A few ideas:

-   Use [`geom_hline()`](https://ggplot2.tidyverse.org/reference/geom_abline.html) and [`geom_vline()`](https://ggplot2.tidyverse.org/reference/geom_abline.html) to add reference lines.

    -   I often make them thick (`size = 2`) and white (`colour = white`), and draw them underneath the primary data layer.

    -   That makes them easy to see, without drawing attention away from the data.

-   Use [`geom_rect()`](https://ggplot2.tidyverse.org/reference/geom_tile.html) to draw a rectangle around points of interest.

    -   The boundaries of the rectangle are defined by aesthetics `xmin`, `xmax`, `ymin`, `ymax`.

-   Use [`geom_segment()`](https://ggplot2.tidyverse.org/reference/geom_segment.html) with the `arrow` argument to draw attention to a point with an arrow.

    -   Use aesthetics `x` and `y` to define the starting location, and `xend` and `yend` to define the end location.

## Scales (I)

::: columns
::: {.column width="60%"}
```{r}
#| layout-ncol: 2
#| fig-cap: 
#|   - "Default"
#|   - "Explicit"
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class))

ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class)) +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_colour_discrete()

```
:::

::: {.column width="40%"}
-   The third way you can make your plot better for communication is to **adjust the scales**.

    -   Scales control the **mapping** from **data values** to **things that you can perceive**.

    -   Normally, ggplot2 **automatically** adds **default scales** for you.

-   Note the naming scheme for scales: **`scale_`** followed by the name of the **aesthetic**, then `_`, then the name of the **scale**.

    -   The default scales are named according to the type of variable they align with: **continuous**, **discrete**, **datetime**, or **date**.

-   There are lots of **non-default scales** which you'll learn about below.
:::
:::

## Scales (II) - Axis Ticks

::: columns
::: {.column width="40%"}
-   There are two primary arguments that affect the appearance of the ticks on the axes and the keys on the legend: **`breaks`** and **`labels`**.

    -   **Breaks** controls the **position of the ticks**, or the **values** associated with the keys.

        -   The most common use of `breaks` is to override the default choice

    -   **Labels** controls the text label associated with each tick/key.

        -   You can use `labels` in the same way (a character vector the same length as `breaks`), but you can also set it to `NULL` to suppress the labels altogether.
:::

::: {.column width="60%"}
::: panel-tabset
## Breaks

```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  scale_y_continuous(breaks = seq(15, 40, by = 5))
```

## Labels

```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  scale_x_continuous(labels = NULL) +
  scale_y_continuous(labels = NULL)
```
:::
:::
:::

## Scales (III) - Legend Keys

::: columns
::: {.column width="60%"}
::: panel-tabset
## Original

```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_count()
```

## Tweaked

```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_count() + 
  scale_size(breaks = c(5, 10), labels = c("small", "large")) + 
  labs(size = "Size")
```
:::
:::

::: {.column width="40%"}
-   You can also use `breaks` and `labels` to control the appearance of legends.

-   Collectively axes and legends are called **guides**.

    -   Axes are used for x and y aesthetics; legends are used for everything else.
:::
:::

## Scales (III) - Legend Layout

::: panel-tabset
## `theme()`

::: columns
::: {.column width="40%"}
-   To control the overall position of the legend, you need to use a [`theme()`](https://ggplot2.tidyverse.org/reference/theme.html) setting.

    -   They control the non-data parts of the plot.

    -   The theme setting `legend.position` controls where the legend is drawn

    -   You can also use `legend.position = "none"` to suppress the display of the legend altogether.
:::

::: {.column width="60%"}
```{r}
#| layout-ncol: 2
#| layout-nrow: 2
base <- ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class))

base + theme(legend.position = "left")
base + theme(legend.position = "top")
base + theme(legend.position = "bottom")
base + theme(legend.position = "right") # the default
```
:::
:::

## `theme() + guides()`

::: columns
::: {.column width="40%"}
-   To control the display of individual legends, use [`guides()`](https://ggplot2.tidyverse.org/reference/guides.html) along with [`guide_legend()`](https://ggplot2.tidyverse.org/reference/guide_legend.html) or [`guide_colourbar()`](https://ggplot2.tidyverse.org/reference/guide_colourbar.html).

    -   The following example shows two important settings:

        -   Controlling the number of rows the legend uses with `nrow`

        -   And overriding one of the aesthetics to make the points bigger. This is particularly useful if you have used a low `alpha` to display many points on a plot.
:::

::: {.column width="60%"}
```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = class)) +
  geom_smooth(se = FALSE) +
  theme(legend.position = "bottom") +
  guides(colour = guide_legend(nrow = 1, override.aes = list(size = 4)))
```
:::
:::
:::

## Scales (IV) - Replacing a Scale

Instead of just tweaking the details a little, you can instead replace the scale altogether. There are two types of scales you're mostly likely to want to switch out: continuous position scales and colour scales.

::: panel-tabset
## `log10(carat)`

::: columns
::: {.column width="60%"}
```{r}
#| layout-ncol: 2
ggplot(diamonds, aes(carat, price)) +
  geom_bin2d()

ggplot(diamonds, aes(log10(carat), log10(price))) +
  geom_bin2d()
```
:::

::: {.column width="40%"}
-   It's very useful to plot transformations of your variable.

-   For example, in diamond prices it's easier to see the precise relationship between `carat` and `price` if we log transform them

-   However, the disadvantage of this transformation is that the axes are now labelled with the transformed values, making it hard to interpret the plot.
:::
:::

## `scale_x_log10()`

::: columns
::: {.column width="60%"}
```{r}
ggplot(diamonds, aes(carat, price)) +
  geom_bin2d() + 
  scale_x_log10() + 
  scale_y_log10()
```
:::

::: {.column width="40%"}
-   Instead of doing the transformation in the aesthetic mapping, we can instead do it with the scale.

-   This is visually identical, except the axes are labelled on the original data scale.
:::
:::
:::

## Scales (V) - Replacing a Color Scale

### Discrete

::: panel-tabset
## ColorBrewer

::: columns
::: {.column width="40%"}
-   Another scale that is frequently customised is colour.

-   The default categorical scale picks colours that are evenly spaced around the colour wheel.

-   Useful alternatives are the ColorBrewer scales which have been hand tuned to work better for people with common types of colour blindness.

-   The two plots here look similar, but there is enough difference in the shades of red and green that the dots on the right can be distinguished even by people with red-green colour blindness.

-   Don't forget simpler techniques.

-   If there are just a few colours, you can add a redundant shape mapping.

-   This will also help ensure your plot is interpretable in black and white.
:::

::: {.column width="60%"}
```{r}
#| layout-ncol: 2
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = drv))

ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = drv, shape = drv)) +
  scale_colour_brewer(palette = "Set1")
```
:::
:::

## Manual

::: columns
::: {.column width="40%"}
-   When you have a predefined mapping between values and colours, use [`scale_colour_manual()`](https://ggplot2.tidyverse.org/reference/scale_manual.html).

-   For example, if we map presidential party to colour, we want to use the standard mapping of red for Republicans and blue for Democrats:
:::

::: {.column width="60%"}
```{r}
presidential %>%
  mutate(id = 33 + row_number()) %>%
  ggplot(aes(start, id, colour = party)) +
    geom_point() +
    geom_segment(aes(xend = end, yend = id)) +
    scale_colour_manual(values = c(Republican = "red", Democratic = "blue"))
```
:::
:::
:::

## Scales (VI) - Replacing a Color Scale

### Continuous

::: columns
::: {.column width="60%"}
```{r}
#| layout-ncol: 2
df <- tibble(
  x = rnorm(10000),
  y = rnorm(10000)
)
ggplot(df, aes(x, y)) +
  geom_hex() +
  coord_fixed()

ggplot(df, aes(x, y)) +
  geom_hex() +
  viridis::scale_fill_viridis() +
  coord_fixed()
```
:::

::: {.column width="40%"}
-   For continuous colour, you can use the built-in [`scale_colour_gradient()`](https://ggplot2.tidyverse.org/reference/scale_gradient.html) or [`scale_fill_gradient()`](https://ggplot2.tidyverse.org/reference/scale_gradient.html).

-   If you have a diverging scale, you can use [`scale_colour_gradient2()`](https://ggplot2.tidyverse.org/reference/scale_gradient.html).

    -   That allows you to give, for example, positive and negative values different colours.

    -   That's sometimes also useful if you want to distinguish points above or below the mean.

-   Another option is `scale_colour_viridis()` provided by the **viridis** package.

    -   It's a continuous analog of the categorical ColorBrewer scales.

    -   It's carefully tailored a continuous colour scheme that has good perceptual properties.
:::
:::

## Zooming

::: panel-tabset
## Data

::: columns
::: {.column width="40%"}
-   There are three ways to control the plot limits:

1.  Adjusting what data are plotted

2.  Setting the limits in each scale

3.  Setting `xlim` and `ylim` in [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html)
:::

::: {.column width="60%"}
```{r}
mpg %>%
  filter(displ >= 5, displ <= 7, hwy >= 10, hwy <= 30) %>%
  ggplot(aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth()
```
:::
:::

## Coordinates

::: columns
::: {.column width="40%"}
-   To zoom in on a region of the plot, it's generally best to use [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html).
:::

::: {.column width="60%"}
```{r}
ggplot(mpg, mapping = aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth() +
  coord_cartesian(xlim = c(5, 7), ylim = c(10, 30))
```
:::
:::

## Limits

::: columns
::: {.column width="40%"}
-   You can also set the `limits` on individual scales. Reducing the limits is basically equivalent to subsetting the data. It is generally more useful if you want *expand* the limits, for example, to match scales across different plots. For example, if we extract two classes of cars and plot them separately, it's difficult to compare the plots because all three scales (the x-axis, the y-axis, and the colour aesthetic) have different ranges.

-   One way to overcome this problem is to share scales across multiple plots, training the scales with the `limits` of the full data.
:::

::: {.column width="60%"}
```{r}
#| layout-ncol: 2
#| layout-nrow: 2
suv <- mpg %>% filter(class == "suv")
compact <- mpg %>% filter(class == "compact")

x_scale <- scale_x_continuous(limits = range(mpg$displ))
y_scale <- scale_y_continuous(limits = range(mpg$hwy))
col_scale <- scale_colour_discrete(limits = unique(mpg$drv))

ggplot(suv, aes(displ, hwy, colour = drv)) +
  geom_point() +
  x_scale +
  y_scale +
  col_scale

ggplot(compact, aes(displ, hwy, colour = drv)) +
  geom_point() +
  x_scale +
  y_scale +
  col_scale

```
:::
:::
:::

## Themes

Finally, you can customise the non-data elements of your plot with a theme:

```{r}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  theme_bw()
```

ggplot2 includes eight themes by default. Many more are included in add-on packages like **ggthemes** (<https://github.com/jrnold/ggthemes>), by Jeffrey Arnold.

## Saving your Plots

There are two main ways to get your plots out of R and into your final write-up: [`ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) and knitr. [`ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) will save the most recent plot to disk:

```{r}
ggplot(mpg, aes(displ, hwy)) + geom_point()
```

```{r, eval = FALSE}
ggsave("my-plot.pdf")
#> Saving 7 x 4.33 in image
```

If you don\'t specify the `width` and `height` they will be taken from the dimensions of the current plotting device. For reproducible code, you\'ll want to specify them.

Generally, however, I think you should be assembling your final reports using R Markdown, so I want to focus on the important code chunk options that you should know about for graphics. You can learn more about [`ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) in the documentation.
